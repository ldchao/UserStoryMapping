public LRU(int cacheSize) {
    this.cacheSize = cacheSize;
    int capacity = (int) Math.ceil(cacheSize / hashLoadFactory) + 1;
    map = new LinkedHashMap<K, V>(capacity, hashLoadFactory, true) {
        private static final long serialVersionUID = -1;
        @Override
        protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
            return size() > LRU.this.cacheSize;
        }
    };
}

// offer¡¢poll¡¢peek
PriorityQueue<Integer> minHeap1 = new PriorityQueue<>(3, Integer::compareTo);
PriorityQueue<Integer> minHeap2 = new PriorityQueue<>(3, Comparator.naturalOrder());
PriorityQueue<Integer> maxHeap = new PriorityQueue<>(3, Comparator.reverseOrder());

Stack£ºpush¡¢pop¡¢peek¡¢empty
Queue£ºadd offer remove poll peek
ArrayBlockingQueue£ºadd offer put   remove,poll,take  ¡¾Òì³£¡¢bool¡¢×èÈû¡¿
